docker version -- verified cli can talk to engine
docker info -- most config values of engine 
docker container ls -- to check conatiners 
docker conatiner stop "container id"
docker conatiner ls -a
docker container run --publish 80:80 --detach --name webhost nginx
docker container logs "name"  --to check the logs
docker container top "name"
docker ps

docker container rm "container id"  -- to delete container 
docker container rm -f "container id"  -- to force delete

image is the application we want to run 
A container is an instacne of that image running as a process
you can have many containers running off the same image
Dockers default image registry is called docker Hub


docker container run --publish 80:80 nginx
docker container run --publish 80:80 --detach nginx (run in the background)
  
   1. Downloaded image nginx from docker hb
   2.  Started a new container form that image
   3. opened port 80 on the host Ip
    4. Routes that traffic to the container ip port 80

what happens in docker conatiner run 

   looks for that image locally in image cache doesnot find anything
then looks in remote image repository defaults to docker hub
downloads that latest version 
creates new conatiner based on that image and prepares to start 
gives it a virtual ip on private network inside docker engine
opens up port 80 on host and forwards to port 80 in container
starts container by using the cmd in the image docker file
===================================================================

dcoker conatiner run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T
                              change host                     version image


-p to open port 
-e to set env confing in conatiner 
-d for detach to run container in the background 
docker conatiner run --publish 8080:80 -d --name mysql mysql -e MYSQL_RANDOM_PASSWORD=yes

docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_PASSWORD=yes mysql

curl http://192.168.99.100/

docker images 

docker container top "name" -- to process list in one container 
docker container inspect "name" ---- to check how container is configured 
docker container stats --help
docker container stats ----- to check streaming view of live data container performance 

----------------------------------------------------------------------------------
docker container run -it  --- start new container interactively
docker container exec -it --- run additional command in exiting container 

docker container run -it --name proxy nginx bash

docker container start -ai "name"

docker container exec -it mysql bash

docker container run -it alpine sh
-----------------------------------------------

Docker networks : concepts

review of docker container run -p 
For local dev/testing, netowrking usually "jest work:
quick port check with docker container port "container"


to check container ip address:

docker container inspect --format "{{ .NetworkSettings.IPAddress }}" webhost
----------------------------

docker network

docker network ls (show network)
docker network inspect (inspect a network)
docker network create --driver (create a network)
docker network connect (Attach a network to container)
docker network disconnect (detach a network from container)

docker network create my_app_net (to create own network in docker)

docker container run -d --name new_ngnix --network my_app_net nginx
connect to the existing network for cotainer 

docker network connect networkId containerId
docker network disconnect networkId containerId
---------------------------------------------------------------------
docker container run -d --name my_name --network my_app nginx
docker container exec -it new_ngnix ping my_name

const items = [ { text: "a", key: 1 },{ text: "b", key: 2 },{ text: "c", key: 3 }]


