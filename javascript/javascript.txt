html to define the content of webpages
css to specify the laout of webpages
java script used for behavior of a web page
if we write script in head its called embeded script
if write in tag its called inline script
inline-- inside html tag
embeded-- inside head tag
external-- outside of html doc
<script src=""></script>
---enbeded js--
<script>
function test()
{
  alert("this is enbeded js");
}
</sctipt>

----variables - placeholders-----

used for to store data. 
variables * constant 
we cannot change constant but we can change varibles

   var        a      = 100;
(keyword)  (var name) (assignment operator) (value)
use double codes for text in variables
var username="krishna"
 var b =25.5;  (floating point)
9 = number
40.3 = floating point
true,false = boolen point
null = object 

--arithamatic operations---

<script>
 var a = 10;
 var b = 10;
 var c = a+b;
 document.write(c)
</script>

--output functions or display functions--
to check values in a varible we use output functions.
there are 4 types of output functions.
1.console.log(b); //output in console/ 
2.window.alert(a); //window alert/
3.document.write(myname) //in body/
4.document.getElementById("kk").innerHTML = myname; //replace html para with js id/

--assignmennt operators--

value is changing from one variable to another variable.

        var a; //define
	a = 100; //vlaue assign
	document.write(a);
	document.write("<br>");
	var b;
	b=a;
	document.write(b);
	document.write("<br>");
	
	b+= 25;
	document.write(b);

---------------output------
         100
         100
         125
---------------------------

--increment and decrement operators--
 adding some value to variable value 

        var a = 500;
	document.write(a);
	document.write("<br>");
	
	a++;
	document.write(a);
	
	a--;
	document.write(a);

--Relational Operations--
it is used for only 2 variables
x==y
x!=y
x>y
x<y  
x>=y
x<=y


        var x = 200;
	var y = 100;
	
	
	temp1 = (x==y);
	document.write(temp1); // false
	document.write("<br>")
	
	temp2 = (x!=y);
	document.write(temp2); // true
	document.write("<br>");
	
	temp3 = (x<y);
	document.write(temp3); //false
       document.write("<br>");	
	
	temp3 = (x>y);
	document.write(temp3); //true
        document.write("<br>");

--logical operators--
if their is 3 variables we use logical operators.
and operator &&
or operator ||

        var a = 500;
	var b = 250;
	var c = 50;
	
	var temp1 = ( (a<b)&& (a>c)  ) //and operator
	document.write(temp1);
	document.write("<br>");
	
	var temp2 = ( (a<b)|| (a>c)  ) //or operator
        document.write(temp2);
	document.write("<br>");
	
	var temp3 = ( (!a>b)  ) //and operator
	document.write(temp3);
	document.write("<br>");	

--Concatenation Operator ---
 if we add two strings its called as concatenation

        var fname = "krishna";
	var lname = "kk";
	var fullname;
	fullname = fname+lname;
	document.write(fullname);
	document.write("<br>");
	
	var s1 = "hyderabad";
	var n1 = 2016;
	var mix=s1+n1;
	document.write(mix);
	document.write("<br>");
	
	var a = '200';
	var b = '25';
	var c = a+b;
	document.write(c);
	document.write("<br>");

output== krishnakk
         hyderabad2016
         20025

--control statements-If condition---

if condition
switch
while
do while
for 
break and continue 

----if statement---
   var user = "krishna";
   if(user =="krishna")
   {
   document.write("<h1>admin</h1>");
   
   }
   else
   {
   document.write("<h1>Subscriber</h1>");
   
   }
--while loop--
    //while loop//
   var i = 1;
   
   while (i<=25)
   {
   document.write("<h1>"+i+"</h1>");
   
   i++;
   }

-----do while loop------
---for loop-----
for(i=1;         i<=50;     i++)
    intilistion  condition  increment

---break and continue statement---
if we want to stop a loop in middle and start again 
//break //
	for (i=1; i<=50; i++)
	{
	
		document.write(i);
		 if(i==20) break;
		document.write(",");
	
	}
	
//continue//
	for(i=1;i<=50; i++)
	{
		if(i==20)
		 continue;
		 document.write(i+ "<br>");


	}

========================================================================================
-----popups----
alerts and confirm.
alert is a just debugging tool.
alert---

alert("this is alert message")

confirm--
confirm("this is confirm message")

var test=confirm("this is confirm message demo")
document.write(test);

prompt--
prompt("enter your city")

var test = prompt("enter your city")
document.write("test");

----arrays---
a=[10,20,30] its an array.
to store multipule values.
array index starts from 0

we can write arrays in 3types.
a=[10,20]
alert(a(1));

var myarray = new Array(10,20,30)
alert(myarray[2]);

var test = [20,30,20]
alert(test[2]);
=====================================================================================================================
---array methods and concat and sort--

var test= new Array(10,20,30);
alert(test.length);

output is 3

concat method to add more arrays in one variable or attach values 

var test = new Array(10,20,30);
var test2 = test.concat(50,60,60);
alert(test2);


output is 10,20,30,50,60,60

for sort--
var test = new Array(20,10,30);
test.sort();

output is 10,20,30
=========================================================================================================================
--functions---
functions are two types.function is a keyword. it is a block of information. 
1.user defind--manval
2.predefind-- default 


with argumets and without arguments.

//function defination part function without argument.
	
	 function myfun()
	 {
	 //function goes here,
	 document.write("this message is from function");
	 }
	
	myfun();
	
	//function with arguments.
	function add(a,b)
	{
	c=a+b;
	return(c);
	
	
	}
	
	result = add(33,66);
	alert(result);

---documents--
alert(document.body.innerHTML);

---getelement by id----
alert(document.getElementById("mydiv").innerHTML);

--events--

user perform a keyboard/mouse action
html element raises an event 
evnet finction will be excuted.

--keyup events---

on blur
on focous
keyup

-----------------------------------------------------------------------------------------------------------------------------------------


javascript

like in any language js also need variables. and to do that we say "var"

var <name of the variable> = <value of the variable>

example
var x =  10;
(when we use the keyword "var" we are defining a variable called "x").

x=10;
(when we dont use the keyword "var ", it means that X was previously difined somewhere)

**Avoid write like this: var x; because js will not know how much memory needs to get assiged always initilize your variables

thumb rules:
!. always define your variables by usig keyword "var"
2. always initiallize your variable. 
--------------------------------------------------------------------------------------------------------------------------
Data types:

JS supports many data types.
data types are devided into two categories;

1.primitive data types
2.object
3.functions


primitive data types:
these are the basic data types that you find in any language;
a, Number(integers and float - decimal number)
b. Chararcter(alphabets)
c. String(collection chataracters or alphabets is String. in short you can say a statement)
d, boolean(this akes true or falase)
4. null
5.undefined
-----------------------------------------------------------------------------------------------------------------------------
object: 
these are special of data types where we can define our own set of datatypes objects take primitive data types inside them.
example.

var x = {
 firstName: "krishnakanth"
};

------------------------------------------------------------------------------------------------------------------------------

Functions:
funcitons are unique feature introduced in Js these take a value and then gives out a result.

example:

var x = funtion(value){
	value + 1;
	returen value;
}
---------------------------------------------------------------------------------------------------------------
null means variable is defind but it has no value 
undefind is variable is not defind
--------------------------------------------------------------------------------------------------------------
objects:

objects are special type of data type.
inside these objects we can call all the primitive data types.
it gives us the power of creating our own structure of data types 

syntax:
var x = {
	<property> : <value of the property>
};

example:
var x = {
	firstName : 'srikar',
	rollnumber: 25,
	isPresent: false,
	isSuspended:null,
	y:{
	lastName: 'kanth'
}
};

now "X" is an object that holds four primitive data types.
the "{" and "}" are called as Object-literals

there is a difference betwee variable and property 
variable hold the entire object  

**dont put comma to the last property, comma means there will be another property.


property is one entity of the object 
}
----------------------------------------------------------------------------------------------
updating properties.

there are two ways of updating the properties of an object 
1.dot notation
2.property notation

dot notation: 
	x.firstName = 'something',

property notaiton:
	x['firstName'] = 'something';
----------------------------------------------------------------------------------------------
functions

functions are totally different from other data types including objects.
functions are used to perform some logic and then result out/return the result of that logic.
the result can be any primitve data type or objects,

syntax:
function<name if the function>(){
 return<statement>;
} 


examle:

function addition(){
	var x = 1;
	var y = x+1;

	return y;
}
 functions allow us to create temporary variables inside them. this means that those variable live only inside that function.
**

TYPES OF FUNCTIONS

there are two types of functions;
1. named functions
2. anonymous functions.

named functions:-
	this will have a name associated to them

named functions must return something. whereas anonymous functions may or maynot return any thing.
anonymous funcitons are also called ad CALLBACK FUNCTIONS
//function definations: this means define a fuction

function addition(){
	var x = 1;
	return (x+1);
};
//function calling: this means to call a function
addition();

var addition = 3;
console.log(addition);
console.log(addition());
================================================================================================================================================

SCOPE IN JS
 this simply means the life of the variable, if a variable is created inside a function
then the scope of the variable is within that function,//local variable
if a variable is created outside of function then the scope of that variable is within that entire file.// global variable

var global = 100; // gloabl variable

function test(){
 var local =55;
};// local variable

since life of the global varaibles is throughout the life of the app js doesnot know how much memory needs to allockate to that so because  of that we always avoid gloable variabls

gloabl varible slow our application
--------------------------------------------------------
IIFE construct

functin intialize(){
  var x = 10;
};

intialize();
 these are used to avoid memory leaks from global variables.
***always have iife construct inyour js. even if its only one line write it inside the iife construct.

**scope in js
this simply means the life of the variable
if a variable is created inside a function then the scope of the variable is within that function if a variable is created outside a functin then the scope of that variable is within that entire js file.

since life of the global varibale is throught the life of the app js doesnt knwo how much memory it needs to allocate to that so because of that we always avoid global variabls!!!

============================================================================================================================================================================================

oops - object oriented programming

there are so many data types we saw in Js and one of the special one is the object 

objects also gives us the power to write our own structured variable/datatype

json - java script object notation
these are very light weight objects that can be shared between one mechine to another 
 var x = {
	firstname: 'krishna';
	callback: function(){
	   return 'kanth';
          },
         rollnumber : 55

         };

=========================================================================================================================================================
class
objects have fixed properties and fixed values when we define them. so when we want to construct a dynamically changing object we end up using expression
=========================================================================================================================================================
classes are nothing but functions that are converted to objects. by using this
objects are collection of property
functions is a set of statemets that performs a tast
=========================================================================================================================================================
difference between classes and objects:

classes are functions convertedto objects
to convert a function to a class we used 'this' key word inside the function.
to inherit the properties of this class, we use the keyword 'new' 
class doesnot dupport two way bridge. they can only be cloned.
syntax:
	function() fullname{
		this.firstName= 'krishna';
		this.lastName= 'kanth';
	}

syntax for inhertitance 
var person = new fullName();



objects are datatype which  has properties and each properties has a value.
to inherit the properties of this class, we use the keyword 'object.create()'
to create new object we use Object.create call
objects can support two way bridge as well as cloning
syntax:
	fullname = {
		firstName: 'krishna',
		lastName: 'kanth'		
};

syntax for inheritance(cloning)

var person = Object.create(fullName)

==============================================================================================================================================================
arrays:-

arrays are special types of objects.
**arrays are not a data types.
these are collection of like wise entities(datatypes)

Syntax:
var x = [];// this is an empty array

var y=['krishna','kanth','munni','meghana'];// krishna is entitie

var z=[1,3,4];

var alpha = 
[{firstname: 'krishna';
lastname: 'kanth'
},
{
firstname:'hello';
lastname:'world';
}];

lengh of the arrays =  number of lindexs.
**number of indexs start from 0

**ARRAYS ARE INHERITED FROM ARRAY() CLASS
	Array() class has certain properties.
1.isArray()
	this checks if the variable is an array or not. this returns 	true or false
	syntax:
		Array.isArray(<variable>);

2.length
	this outputs the length of the array

	syntax:
		<variable>.length

3.push
	this allows us to add an index entry at the end of the array
	syntax:
		<variable>.push(<value>);

4.pop
	this allows us to remove an index entry from the end of the 	array
	syntax: <variable>.pop();
	
5.unshift
	this allows us to add an index entry at the front of array 
	syntax:
		<variable>.unshift(<value>);

5.shift
	this allows us to remove an index entry at the front of array 
	syntax:
		<variable>.shift(<value>);

6.splice
	this allows us to add/remove an index entry at a certain location in the array

	syntax:
		<variable>splice(<index>,<number of entry to replace>,<value>);

7.indexof()

	this allows us to findout at what index a partifular data exists
	syntax:
		<variable>.indexOf(<value>);
8.concat()
	adding two arrays
	syntax: 
		<variable>.concat<variable2>
**not look for duplicate entry

9.filter
	this is used to filter out the data inside the attay
syntax:
	<array>.filter(<condition>);

10.join
	this combine all the values in array
syntax:
	<array>.join();
===================================================
keywords in js:

object
function
array
string
number
boolean

=========================================================================================================================================================================================
JS CLOSURES

if we have one functioin called outerFunc inside which we create a variable called 'global' now we create a function called innerFun inside the outerFunc. this innerFunc has a same variable declaration. Then the call inside that innterFunc will always invoke the newly created variable insdie the innerFunc

Defination:
	lets say we have one function insdie another function then we can variables created in the outer function inside the inner function.

is the above example js is going look for test inside the innerMost()
if it connot find it it will move one immediate parent level up and will look for definition of test in inner90 if it still connot find it it will move one  more level up and look for difinition of test in outser(0 once it finds the definition it will take that if not the moves one level up and  if it still cannont find the definition it will throu an exception error saying 
=========================================================================================================================================================================================

strings


strings are one type of primitive data type which has some special set of methods available for us.

1.string concatenation
	this means we want to merge one string with the other.

	we use the + symbol to merge two strings 
	exp:
	var text1 = 'helo';
	var text2= 'world';
	var output = text1+text2;
**remember if any one of the two variables is a string tye tyem string concatenation takes place if both the variables are numbers then it will perform math addition.

in math expressions the brakers take the highest priority then / then * then + then - 

2. length

	similar to array.legth strings also provide us the length or number of characterws insde the string 

	exmp:
	var test = 'krishna';
	console.log(test.length);

Regex -  regular expressions
these a set of rules that will define how our strings needs to work.

 replace :
		using the concepts of regular expressions we can replace one character or a set or charecters in side a strinf with other value.
	example:
	var name= 'krishna kanth';
	var newName = name.replace(/krishna/g, 'test');
	console.log(newName); // Test kanth 

4.chatAt
	this is used to find whether a particular index in the string has that particular character
	exmple:
	var name = 'krishna';
	name.indexOf(r); //outpiut: 1 
	if(name.charAt(0) === 'k'){
	var name2 = 'Krishna';
	console.log(name2);
	}
***the index starts from 0

5.concat
	this is used to concat(merge) more then two strings
	examples:
	var name = 'krishna';
	var newName = name.concat('','kanth','','is a doing great');
	console.log(newName);

6.substr()
	this is used to trim off certain characters from the string
syntax:
	<string>.subster(<string index>,<number of characters from that>);
	
exam:
	
	var hix = 'krishna kanth';
	var newhix = text.substr(0,6);
	console.log(newhix);

***there is a difference between substr() and substring()
substr() takes two argumets, frist being the starting index and second is the number of characters from that index substring() takes two arguments, first being the starting index and second being the ending index.

7.split
	this converts the string into an array of strings based on the charecter we pass

syntax :
	<string>.split(<the character which will be treated as divider>);
=====================================================================================================================================================================
loops:

**to set a debugging breakpoint from the js file we use debugger in the code make sure to remove all the debugger statement before pushing code to git

	loops are a method of a re interarcting the same logic again and again untill it reaches the final number.
types fo loops
1,for 
	this is standard looping keyword this is the mostly used looping mechanisum
	to define a for statement we has three arguments to this for statement 
	syntax is 
		for(<initialized variable>;<condition>;<incrementing/degreementing the intilized variable>){
		//any logic
		}
** we usually use number for the intilized variables.
**we need the condition to tell for statement to stop at one point where the condition fails

2. for(using the in statement)
	this is simmilar to the above looping statement but it is onnly used in objects
**rememebr arrays are a type of objects so we can use this looping for arrays also 
	for(<new variable > in <object name>)
3.do while statements
	this is similar to for loop with certian syntax changes
	syntax:
	do{
	//logic
	<increment/decrement the intialized variable>
	}while(<condition>)


	example:
	var i = 0 ;
	do{
	console.log(i);
	}	
	while(i<10);
**there is a slight difference between do while statements
	do while runns the logic before the condition check while run the condition first and then excute the logic

4.if else statement
	if basic idea behind this is to check for a condition.
	if that condition is true then perform some logic
	IF THAT CONDITION IS FALSE THEN PERFORM SOME DIFFERENT LOGIC

	syntax:

	if(<condition>){
	//logic to be executed if <condition> is true
	}
	else{
		//logic to be excuted it <condition> is fase
	}
	**else block is optional
	**<conditioin> should always return boolean output
5.switch statements
	this are used to define several cases of the condition
	SYNTAX:
	switch(<condition>){
	case<match the condition>:{
			//logic
		}
	}

6 if elseif else statement

	these are similar to if else but when create more else screnarios
	syntax:
	if(<condition>){
		//lofic if <condition> is true
	}
**it is highly advised that we write the else block when we are writing the elseif statement.
___________________________________________________________________________________________________________________________________________________________
BREAK AND CONTINUE
break:
	there are used to break a loop when certain condition is met inside the loop we can use the break statement to stop the loop syntax.
	break;
	example:

	var test =[1,4,454,88];

	for(var i=0;i<test.length;i++){
	//check if the value at that index of array test is 2
	if(test[i] === 454){
	break;
	}
	console.log(test[i]);
	};

==>
continue statement:

	it is mainly used for while and do while loop
syntax:
	continue
exmaple:
	var i = 0;
	var n= 2;
	while(i<10){
	i++;
	if(i ===5){
	continue;
	}
	}

4,forEach
	 this type of looping mainly happens indexs of an array
syntax:
	<array>.forEach(function(value,index){

	 });

*****************************************************************************************************************************************
what is the difference between =, == , === in js?
	= this means that we are setting a value to variable
	== this means to check if the left hand side is equal to right hand side regardless of its type
=== this means to check if the left hand side is equal to right hand side both by data and by type 
*****************************************************************************************************************************************


DOM: document object model
	what is DOM?
	whenever we connect js with htmland open that html in the browser then that browser is converted into ab object, there an object called WINDOW whih gets constructed.
this window object holds all the document
**from js prospective the entire html is called as'document'

**window object is the parent of all this window object is basiclally our browser inside java script each html now becoms a document as a property inside this window object 

hence to target an element we simply say either window.document.getElementById 

document.querySlector which used to trigger elements
___________________________________________________________________________________________________________________________________________

SELECTING AN ELEMENT FROM DOM

we can maek use of predefined properties of the document object. some of them are

1.getElementById() -> this targets only unique IDs
2.getElementsByClassName() -> this targets all the elements with the same class names
3.getElementByTagName() -> this targets all the elements with the specified tag names
4.querySelector() -> this is a special superset of all the selectors. we use these to target absolutely anything in the html document.
5.querySelectorAll() --> this is similar to querySelector() but it returns all the elements as an array.

___________________________________________________________________________________________________________________________________________

DOM EVENTS:

All the acctions that happen on the html is considered as EVENTS in JS

There are some standard DOM events:

 1. onload
		this is triggered when the window is loaded

	syntax:
		<body onload="myTest()">
			<p>this is a para</p>
		</body>
		<script>
	(function(window){

		window.myTest = function(){
			console.log('test');
		}
	})(window);

			
	</script>
====================================================================

****Remember that the iife construct is an anonymous function we call it immiditely Because of this the DOM never ges initilized to avoid that problem we can pass window as an argument.

exmple:
// for plan javascript
(function(window){

	window.document.getElementById('heading');
})(window);



// for plan jQuery
(function($){

	var heading = $('#heading');
})(window.jQuert);


// for Angular
(function(angular){
	angular.module('myApp',function MyApp(){

});

})(window.angular);
====================================================================
2. onclick
	this is triggered when the user clicks on an elemet
	<div onclick="myClick()"></div>
	<script>
	(function(window){

		window.myClick = function(){
			console.log('I WAS CLICKED');
	}
	})(window);
	</script>
	</script>



3.onsubmit
	this is triggered when we submit a form

4.onchange
	this is triggered when the value of an element
5.onfocus
	this is triggered when the element is in focus of an element
6.onblur
	this is triggered when the element is focused out
** every element has a default action/event. for example the anchor tag has click navigation as default event
to stop the default action, we can make use of preventDefault callback
=====================================================================
Event target
	this are used to captured the events from the js side rather then html
these are 3 methods:
	3types
1.addEventListner():
	This method is used to listen for an event
2.removeEventListener
3.dispatchEvent


